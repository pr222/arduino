#include "arduino_secrets.h"

// Latest uploaded code to the device from the cloud sketch "Untitled_2_jun03a"

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/bf9d5bae-a73e-4a7c-8cbd-af2d602c9d96

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
	
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;
// uint32_t myCustomColor = carrier.leds.Color(255,0,0);
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update(); // Keep everything running in the meanwhile!
    delay(500);
  }
  
  delay(500);
  CARRIER_CASE = false;
  carrier.begin();
  //Set if it has the Enclosure mounted
  // CARRIER_CASE = false;
  //Initialize the IoTSK carrier and output any errors in the serial monitor
  // carrier.begin();
  // delay(1500);
  // carrier.leds.fill(myCustomColor, 0, 5);
  // carrier.leds.show();
  // Serial.print("SEUTP: ")
  // Serial.print(temperature);
  // Serial.println();
}

void loop() {
  // myCustomColor = carrier.leds.Color(0,255,0);
  // carrier.leds.show();  
  ArduinoCloud.update();
  
  temperature = carrier.Env.readTemperature();
  Serial.print(temperature);
  delay(1000);
}
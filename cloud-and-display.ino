#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/bf9d5bae-a73e-4a7c-8cbd-af2d602c9d96

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature;
  float humidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>

MKRIoTCarrier carrier;

int calibrationValue = 7;

void displayTemperature() {
  // Set colors (comes from the Adafruit-ST7735-Library)
  carrier.display.fillScreen(ST77XX_GREEN);
  carrier.display.setTextColor(ST77XX_BLACK);
  
  // Size, position and print text
  carrier.display.setTextSize(6);
  carrier.display.setCursor(30, 70);
  carrier.display.print("Temp: ");
  carrier.display.setTextSize(4);
  carrier.display.setCursor(40, 120);
  carrier.display.print(temperature);
  carrier.display.print(" C");
}

void displayHumidity() {
  // Set colors (comes from the Adafruit-ST7735-Library)
  carrier.display.fillScreen(ST77XX_CYAN); 
  carrier.display.setTextColor(ST77XX_BLUE); 

  // Size, position and print text
  carrier.display.setTextSize(6); 
  carrier.display.setCursor(20, 70);
  carrier.display.println("Humid: ");
  carrier.display.setTextSize(4);
  carrier.display.setCursor(30, 120);
  carrier.display.print(humidity);
  carrier.display.println(" %");
}

void handleTouch() {
  // Read latest state of touch pads
  carrier.Buttons.update();

  // Determine what to display on the carrier's screen
  if (carrier.Buttons.onTouchDown(TOUCH0)) {
    carrier.display.enableDisplay(true);
    digitalWrite(TFT_BACKLIGHT, HIGH);
    displayTemperature();
  } else if (carrier.Buttons.onTouchDown(TOUCH1)) {
    carrier.display.enableDisplay(true);
    digitalWrite(TFT_BACKLIGHT, HIGH);
    displayHumidity();
  } else if (carrier.Buttons.onTouchDown(TOUCH4)) {
    // Turn off display
    carrier.display.enableDisplay(false);
    digitalWrite(TFT_BACKLIGHT, LOW);
  }
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update(); // Keep everything running in the meanwhile!
    delay(500);
  }
  
  delay(500);
  CARRIER_CASE = false;
  carrier.begin();
}

void loop() {
  ArduinoCloud.update();
  
  temperature = carrier.Env.readTemperature()-calibrationValue;
  humidity = carrier.Env.readHumidity();

  handleTouch();

  // Pause for one second
  delay(1000);
}
